{
  "vcs": {
    "enabled": true,
    "clientKind": "git",
    "useIgnoreFile": true
  },
  "files": {
    "ignoreUnknown": false,
    "includes": ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/*.json"],
    "experimentalScannerIgnores": [
      "*.tsbuildinfo",
      "__generated__/**",
      "__mocks__/**",
      ".bun/**",
      ".detoxrc.js",
      ".tamagui/**",
      "@types/**",
      "*.graphql",
      "*.html",
      "*.inc",
      "*.json",
      "*.jsonc",
      "*.md",
      "*.yml",
      "craco.config.cjs",
      "jest-setup.js",
      "jest.config.js",
      "metro.config.js",
      "types/**",
      "**/lcov-report/**"
    ]
  },
  "formatter": {
    "enabled": true,
    "formatWithErrors": false,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineEnding": "lf",
    "lineWidth": 120,
    "attributePosition": "auto",
    "bracketSameLine": false,
    "bracketSpacing": true,
    "expand": "auto",
    "useEditorconfig": true,
    "includes": [
      "**/*.ts",
      "**/*.tsx",
      "**/*.js",
      "**/*.jsx",
      "**/*.json",
      "!**/*.tsbuildinfo",
      "!**/__generated__",
      "!**/__mocks__",
      "!**/.bun",
      "!**/.detoxrc.js",
      "!**/.tamagui",
      "!**/@types",
      "!**/*.graphql",
      "!**/*.html",
      "!**/*.inc",
      "!**/*.md",
      "!**/*.yml",
      "!**/craco.config.cjs",
      "!**/jest-setup.js",
      "!**/jest.config.js",
      "!**/metro.config.js",
      "!**/types",
      "!**/lcov-report"
    ]
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": false,
      "complexity": {
        "noAdjacentSpacesInRegex": "warn",
        "noArguments": "error",
        "noBannedTypes": "error",
        "noCommaOperator": "warn",
        "noExtraBooleanCast": "warn",
        "noUselessCatch": "error",
        "noUselessEscapeInRegex": "warn",
        "noUselessLoneBlockStatements": "warn",
        "noUselessTypeConstraint": "error",
        "noUselessUndefinedInitialization": "warn",
        "noVoid": "warn",
        "useLiteralKeys": "warn"
      },
      "correctness": {
        "noChildrenProp": "error",
        "noEmptyCharacterClassInRegex": "warn",
        "noEmptyPattern": "error",
        "noNonoctalDecimalEscape": "error",
        "noPrecisionLoss": "error",
        "noRestrictedElements": {
          "level": "error",
          "options": {
            "elements": {
              "div": "Please avoid using div when possible, even in web code! Use `Flex` or  Fragments (`<>`)"
            }
          }
        },
        "noSelfAssign": "error",
        "noSwitchDeclarations": "error",
        "noUnsafeFinally": "error",
        "noUnsafeOptionalChaining": "error",
        "noUnusedImports": {
          "level": "error",
          "fix": "safe"
        },
        "noUnusedLabels": "error",
        "noUnusedVariables": "error",
        "useExhaustiveDependencies": "error",
        "useHookAtTopLevel": "error",
        "useIsNan": "warn",
        "useJsxKeyInIterable": "error",
        "useValidForDirection": "error",
        "useValidTypeof": "warn",
        "useYield": "error"
      },
      "security": {
        "noDangerouslySetInnerHtml": "error",
        "noDangerouslySetInnerHtmlWithChildren": "error",
        "noGlobalEval": "error"
      },
      "style": {
        "noDoneCallback": "error",
        "noNamespace": "error",
        "noNonNullAssertion": "error",
        "noRestrictedImports": {
          "level": "error",
          "options": {
            "paths": {
              "@tamagui/core": {
                "message": "Please import from 'tamagui' directly to prevent mismatches."
              },
              "@uniswap/sdk-core": {
                "importNames": ["ChainId"],
                "message": "Don't use ChainId from @uniswap/sdk-core. Use the UniverseChainId from universe/uniswap."
              },
              "utilities/src/telemetry/trace/Trace": {
                "message": "Please use the Trace in 'uniswap/src/features/telemetry/Trace' for app level usage!"
              },
              "utilities/src/telemetry/analytics/analytics": {
                "message": "Please only use this for initialization, tests, flushing, and internal usage. Otherwise use `packages/uniswap/src/features/telemetry`"
              },
              "@uniswap/analytics": {
                "importNames": ["sendAnalyticsEvent"],
                "message": "Please use the typed `sendAnalyticsEvent` in 'uniswap/src/features/telemetry/send'"
              },
              "expo-localization": {
                "message": "Avoid using due to issue with unsupported locales. Use utilities/src/device/locales.ts getDeviceLocales instead"
              },
              "uniswap/src/features/dataApi/balances/balances": {
                "importNames": ["usePortfolioValueModifiers"],
                "message": "Use the wrapper hooks `usePortfolioTotalValue`, `useAccountListData` or `usePortfolioBalances` instead of `usePortfolioValueModifiers` directly."
              },
              "uniswap/src/features/dataApi/balances/balancesRest": {
                "importNames": ["useRESTPortfolioTotalValue"],
                "message": "Use the wrapper hooks `usePortfolioTotalValue`, `useAccountListData` or `usePortfolioBalances` instead of `useRESTPortfolioTotalValue` directly."
              },
              "i18next": {
                "importNames": ["t"],
                "message": "Please avoid direct imports of t, using `useTranslation` and `i18n.t` when absolutely needed outside of a React context"
              },
              "utilities/src/format/localeBased": {
                "message": "Use via `useLocalizationContext` instead."
              },
              "uniswap/src/features/fiatCurrency/conversion": {
                "importNames": ["useFiatConverter"],
                "message": "Use via `useLocalizationContext` instead."
              },
              "uniswap/src/features/language/formatter": {
                "importNames": ["useLocalizedFormatter"],
                "message": "Use via `useLocalizationContext` instead."
              },
              "uniswap/src/features/chains/hooks/useOrderedChainIds": {
                "importNames": ["useOrderedChainIds"],
                "message": "Use `useEnabledChains` instead, which returns the ordered chains that are currently enabled."
              },
              "ui/src/hooks/useDeviceInsets": {
                "importNames": ["useDeviceInsets"],
                "message": "Use `useAppInsets` instead."
              },
              "react-native-device-info": {
                "importNames": ["getUniqueId"],
                "message": "Not supported for web/extension, use `getUniqueId` from `utilities/src/device/getUniqueId` instead."
              },
              "lodash": {
                "message": "Use specific imports (e.g. `import isEqual from 'lodash/isEqual'`) to avoid pulling in all of lodash to web to keep bundle size down!"
              },
              "uniswap/src/features/chains/chainInfo": {
                "importNames": ["UNIVERSE_CHAIN_INFO"],
                "message": "Use useChainInfo or helpers in packages/uniswap/src/features/chains/utils.ts when possible!"
              },
              "uniswap/src/features/settings/selectors": {
                "importNames": ["selectIsTestnetModeEnabled"],
                "message": "Use `useEnabledChains` instead."
              },
              "uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks": {
                "importNames": ["useAccountListQuery"],
                "message": "Use `useAccountListData` instead."
              },
              "uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks": {
                "importNames": ["useActivityWebQuery"],
                "message": "Import cached/subscription-based activity hooks from `AssetActivityProvider` instead."
              },
              "uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks": {
                "importNames": ["usePortfolioBalancesQuery"],
                "message": "Use `usePortfolioBalances` instead."
              },
              "wallet/src/data/apollo/usePersistedApolloClient": {
                "importNames": ["usePersistedApolloClient"],
                "message": "This hook should only be used once at the top level where the React app is initialized . You can use `import { useApolloClient } from '@apollo/client'` to get the default apollo client from the provider elsewhere in React. If you need access to apollo outside of React, you can use `import { apolloClientRef } from 'wallet/src/data/apollo/usePersistedApolloClient''`."
              },
              "statsig-react": {
                "message": "Import from internal module uniswap/src/features/gating instead"
              },
              "wallet/src/components/ErrorBoundary/restart": {
                "message": "Use `wallet/src/components/ErrorBoundary/restartApp` instead."
              },
              "@ethersproject": {
                "message": "Please import from ethers directly to support tree-shaking."
              },
              "statsig-react-native": {
                "message": "Import from internal module uniswap/src/features/gating instead"
              },
              "react-native-safe-area-context": {
                "importNames": ["useSafeAreaInsets"],
                "message": "Use our internal useAppInsets hook instead."
              },
              "react-native": {
                "importNames": ["Switch", "Keyboard"],
                "message": "Use our custom Switch component instead of Switch. Please use dismissNativeKeyboard() for keyboard dismissals."
              },
              "@gorhom/bottom-sheet": {
                "importNames": ["BottomSheetTextInput"],
                "message": "Use our internal BottomSheetTextInput wrapper from /uniswap/src/components/modals/Modal."
              },
              "expo-haptics": {
                "message": "Use our internal HapticFeedback wrapper instead: import { HapticFeedback } from packages/uniswap/src/features/settings/useHapticFeedback/types"
              },
              "@uniswap/smart-order-router": {
                "message": "Only import types, unless you are in the client-side SOR, to preserve lazy-loading.",
                "allowImportNames": []
              },
              "moment": {
                "message": "moment is not configured for tree-shaking. If you use it, update the Webpack configuration."
              },
              "react-helmet-async": {
                "message": "Import from 'react-helmet-async/lib/index' instead."
              },
              "zustand": {
                "importNames": ["default"],
                "message": "Default import from zustand is deprecated. Import `{ create }` instead."
              },
              "wagmi": {
                "importNames": [
                  "useChainId",
                  "useAccount",
                  "useConnect",
                  "useDisconnect",
                  "useBlockNumber",
                  "useWatchBlockNumber"
                ],
                "message": "Import wrapped utilities from internal hooks instead: useAccount from `hooks/useAccount`, useConnect from `hooks/useConnect`, useDisconnect from `hooks/useDisconnect`, useBlockNumber from `hooks/useBlockNumber`."
              },
              "ui/src/components/modal/AdaptiveWebModal": {
                "message": "Please import Modal from `uniswap/src/components/modals/Modal` instead. Modal uses AdaptiveWebModal under the hood but has extra logic for handling animation, mounting, and dismounting."
              }
            },
            "patterns": [
              {
                "group": ["ui/src/assets/icons/*.svg"],
                "message": "Please do not import SVG files directly from `ui/src/assets/icons/*.svg`. Use generated icon components instead, e.g., `ui/src/components/icons/{iconName}`."
              }
            ]
          }
        },
        "noRestrictedGlobals": {
          "level": "error",
          "options": {
            "deniedGlobals": {
              "defaultStatus": "Use of this global variable is restricted.",
              "status": "Use of this global variable is restricted.",
              "scroll": "Use of this global variable is restricted.",
              "outerHeight": "Use of this global variable is restricted.",
              "screenX": "Use of this global variable is restricted.",
              "opener": "Use of this global variable is restricted.",
              "onfocus": "Use of this global variable is restricted.",
              "pageYOffset": "Use of this global variable is restricted.",
              "addEventListener": "Use of this global variable is restricted.",
              "defaultstatus": "Use of this global variable is restricted.",
              "history": "Use of this global variable is restricted.",
              "frames": "Use of this global variable is restricted.",
              "screenY": "Use of this global variable is restricted.",
              "focus": "Use of this global variable is restricted.",
              "outerWidth": "Use of this global variable is restricted.",
              "opera": "Use of this global variable is restricted.",
              "external": "Use of this global variable is restricted.",
              "innerHeight": "Use of this global variable is restricted.",
              "closed": "Use of this global variable is restricted.",
              "frameElement": "Use of this global variable is restricted.",
              "scrollY": "Use of this global variable is restricted.",
              "self": "Use of this global variable is restricted.",
              "chrome": "Direct `chrome` access is restricted to prevent accidental usage in the wrong context. Use `getChrome()` or `getChromeWithThrow()` instead.",
              "onblur": "Use of this global variable is restricted.",
              "find": "Use of this global variable is restricted.",
              "parent": "Use of this global variable is restricted.",
              "top": "Use of this global variable is restricted.",
              "moveBy": "Use of this global variable is restricted.",
              "menubar": "Use of this global variable is restricted.",
              "length": "Use of this global variable is restricted.",
              "onerror": "Use of this global variable is restricted.",
              "onresize": "Use of this global variable is restricted.",
              "removeEventListener": "Use of this global variable is restricted.",
              "onload": "Use of this global variable is restricted.",
              "scrollTo": "Use of this global variable is restricted.",
              "moveTo": "Use of this global variable is restricted.",
              "scrollX": "Use of this global variable is restricted.",
              "name": "Use of this global variable is restricted.",
              "toolbar": "Use of this global variable is restricted.",
              "innerWidth": "Use of this global variable is restricted.",
              "location": "Use of this global variable is restricted.",
              "locationbar": "Use of this global variable is restricted.",
              "scrollBy": "Use of this global variable is restricted.",
              "resizeTo": "Use of this global variable is restricted.",
              "stop": "Use of this global variable is restricted.",
              "scrollbars": "Use of this global variable is restricted.",
              "blur": "Use of this global variable is restricted.",
              "screenTop": "Use of this global variable is restricted.",
              "confirm": "Use of this global variable is restricted.",
              "screen": "Use of this global variable is restricted.",
              "screenLeft": "Use of this global variable is restricted.",
              "event": "Use of this global variable is restricted.",
              "onunload": "Use of this global variable is restricted.",
              "pageXOffset": "Use of this global variable is restricted.",
              "resizeBy": "Use of this global variable is restricted.",
              "statusbar": "Use of this global variable is restricted.",
              "close": "Use of this global variable is restricted.",
              "open": "Use of this global variable is restricted.",
              "print": "Use of this global variable is restricted."
            }
          }
        },
        "noYodaExpression": "warn",
        "useArrayLiterals": "error",
        "useAsConstAssertion": "error",
        "useBlockStatements": "warn",
        "useConst": "error",
        "useEnumInitializers": "error"
      },
      "suspicious": {
        "noAlert": "warn",
        "noAsyncPromiseExecutor": "error",
        "noBitwiseOperators": "warn",
        "noCatchAssign": "warn",
        "noClassAssign": "error",
        "noCommentText": "error",
        "noCompareNegZero": "error",
        "noConsole": "error",
        "noControlCharactersInRegex": "warn",
        "noDebugger": "warn",
        "noDoubleEquals": "warn",
        "noDuplicateCase": "error",
        "noDuplicateElseIf": "error",
        "noDuplicateJsxProps": "error",
        "noEmptyInterface": "error",
        "noExplicitAny": "error",
        "noExtraNonNullAssertion": "error",
        "noFallthroughSwitchClause": "warn",
        "noGlobalAssign": "error",
        "noIrregularWhitespace": "error",
        "noLabelVar": "warn",
        "noMisleadingCharacterClass": "error",
        "noMisleadingInstantiator": "error",
        "noOctalEscape": "warn",
        "noPrototypeBuiltins": "error",
        "noSelfCompare": "warn",
        "noShadowRestrictedNames": "warn",
        "noSparseArray": "warn",
        "noUnsafeDeclarationMerging": "error",
        "noUselessRegexBackrefs": "error",
        "noVar": "error",
        "noWith": "warn"
      }
    },
    "includes": [
      "**/*.ts",
      "**/*.tsx",
      "**/*.js",
      "**/*.jsx",
      "**/*.json",
      "!**/.eslintrc.js",
      "!**/babel.config.js",
      "!**/jest.config.js",
      "!**/metro.config.js",
      "!**/node_modules",
      "!**/storybook-static",
      "!**/coverage",
      "!.maestro/scripts/dist",
      "!.maestro/scripts/performance/dist",
      "!.maestro/scripts/performance/**/*.js",
      "!**/__mocks__/**"
    ]
  },
  "javascript": {
    "formatter": {
      "jsxQuoteStyle": "double",
      "quoteProperties": "asNeeded",
      "trailingCommas": "all",
      "semicolons": "asNeeded",
      "arrowParentheses": "always",
      "bracketSameLine": false,
      "quoteStyle": "single",
      "attributePosition": "auto",
      "bracketSpacing": true
    }
  },
  "json": {
    "formatter": {
      "trailingCommas": "none"
    }
  },
  "html": {
    "formatter": {
      "selfCloseVoidElements": "always"
    }
  },
  "assist": {
    "enabled": true,
    "actions": {
      "source": {
        "organizeImports": {
          "level": "on",
          "options": {
            "identifierOrder": "natural"
          }
        }
      }
    }
  },
  "overrides": [
    {
      "includes": ["**/*.test.ts", "**/*.test.tsx", "**/test/**", "**/tests/**", "**/*.spec.ts", "**/*.spec.tsx"],
      "linter": {
        "rules": {
          "correctness": {
            "noRestrictedElements": "off",
            "noUnusedVariables": "off",
            "noUnusedImports": "off",
            "useExhaustiveDependencies": "off"
          },
          "style": {
            "useEnumInitializers": "off",
            "noNonNullAssertion": "off",
            "noRestrictedImports": "off"
          },
          "suspicious": {
            "noEmptyInterface": "off",
            "noExplicitAny": "off",
            "noShadowRestrictedNames": "off",
            "noConsole": "off"
          },
          "complexity": {
            "noUselessLoneBlockStatements": "off"
          }
        }
      }
    },
    {
      "includes": ["**/*.js", "**/*.jsx"],
      "linter": {
        "rules": {
          "suspicious": {
            "noConsole": "off"
          }
        }
      }
    }
  ]
}
